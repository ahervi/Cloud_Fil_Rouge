//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./tagThrift_types');
//HELPER FUNCTIONS AND STRUCTURES

TagThrift_getTag_args = function(args) {
  this.tag_id = null;
  if (args) {
    if (args.tag_id !== undefined) {
      this.tag_id = args.tag_id;
    }
  }
};
TagThrift_getTag_args.prototype = {};
TagThrift_getTag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tag_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TagThrift_getTag_args.prototype.write = function(output) {
  output.writeStructBegin('TagThrift_getTag_args');
  if (this.tag_id !== null && this.tag_id !== undefined) {
    output.writeFieldBegin('tag_id', Thrift.Type.STRING, 1);
    output.writeString(this.tag_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TagThrift_getTag_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TagThrift_getTag_result.prototype = {};
TagThrift_getTag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TagThrift_getTag_result.prototype.write = function(output) {
  output.writeStructBegin('TagThrift_getTag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TagThrift_addTag_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
TagThrift_addTag_args.prototype = {};
TagThrift_addTag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TagThrift_addTag_args.prototype.write = function(output) {
  output.writeStructBegin('TagThrift_addTag_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TagThrift_addTag_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TagThrift_addTag_result.prototype = {};
TagThrift_addTag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TagThrift_addTag_result.prototype.write = function(output) {
  output.writeStructBegin('TagThrift_addTag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TagThrift_deleteTag_args = function(args) {
  this.tag_id = null;
  if (args) {
    if (args.tag_id !== undefined) {
      this.tag_id = args.tag_id;
    }
  }
};
TagThrift_deleteTag_args.prototype = {};
TagThrift_deleteTag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tag_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TagThrift_deleteTag_args.prototype.write = function(output) {
  output.writeStructBegin('TagThrift_deleteTag_args');
  if (this.tag_id !== null && this.tag_id !== undefined) {
    output.writeFieldBegin('tag_id', Thrift.Type.STRING, 1);
    output.writeString(this.tag_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TagThrift_deleteTag_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TagThrift_deleteTag_result.prototype = {};
TagThrift_deleteTag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString();
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TagThrift_deleteTag_result.prototype.write = function(output) {
  output.writeStructBegin('TagThrift_deleteTag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TagThrift_getTags_args = function(args) {
  this.beginTag = null;
  if (args) {
    if (args.beginTag !== undefined) {
      this.beginTag = args.beginTag;
    }
  }
};
TagThrift_getTags_args.prototype = {};
TagThrift_getTags_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.beginTag = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TagThrift_getTags_args.prototype.write = function(output) {
  output.writeStructBegin('TagThrift_getTags_args');
  if (this.beginTag !== null && this.beginTag !== undefined) {
    output.writeFieldBegin('beginTag', Thrift.Type.STRING, 1);
    output.writeString(this.beginTag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TagThrift_getTags_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TagThrift_getTags_result.prototype = {};
TagThrift_getTags_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.success = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readString();
          this.success.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TagThrift_getTags_result.prototype.write = function(output) {
  output.writeStructBegin('TagThrift_getTags_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter31 in this.success)
    {
      if (this.success.hasOwnProperty(iter31))
      {
        iter31 = this.success[iter31];
        output.writeString(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TagThrift_deleteAllTags_args = function(args) {
};
TagThrift_deleteAllTags_args.prototype = {};
TagThrift_deleteAllTags_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TagThrift_deleteAllTags_args.prototype.write = function(output) {
  output.writeStructBegin('TagThrift_deleteAllTags_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TagThrift_deleteAllTags_result = function(args) {
};
TagThrift_deleteAllTags_result.prototype = {};
TagThrift_deleteAllTags_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TagThrift_deleteAllTags_result.prototype.write = function(output) {
  output.writeStructBegin('TagThrift_deleteAllTags_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TagThriftClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
TagThriftClient.prototype = {};
TagThriftClient.prototype.getTag = function(tag_id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getTag(tag_id);
};

TagThriftClient.prototype.send_getTag = function(tag_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTag', Thrift.MessageType.CALL, this.seqid);
  var args = new TagThrift_getTag_args();
  args.tag_id = tag_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TagThriftClient.prototype.recv_getTag = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TagThrift_getTag_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTag failed: unknown result');
};
TagThriftClient.prototype.addTag = function(name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_addTag(name);
};

TagThriftClient.prototype.send_addTag = function(name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addTag', Thrift.MessageType.CALL, this.seqid);
  var args = new TagThrift_addTag_args();
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TagThriftClient.prototype.recv_addTag = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TagThrift_addTag_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addTag failed: unknown result');
};
TagThriftClient.prototype.deleteTag = function(tag_id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteTag(tag_id);
};

TagThriftClient.prototype.send_deleteTag = function(tag_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteTag', Thrift.MessageType.CALL, this.seqid);
  var args = new TagThrift_deleteTag_args();
  args.tag_id = tag_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TagThriftClient.prototype.recv_deleteTag = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TagThrift_deleteTag_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteTag failed: unknown result');
};
TagThriftClient.prototype.getTags = function(beginTag, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getTags(beginTag);
};

TagThriftClient.prototype.send_getTags = function(beginTag) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTags', Thrift.MessageType.CALL, this.seqid);
  var args = new TagThrift_getTags_args();
  args.beginTag = beginTag;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TagThriftClient.prototype.recv_getTags = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TagThrift_getTags_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTags failed: unknown result');
};
TagThriftClient.prototype.deleteAllTags = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteAllTags();
};

TagThriftClient.prototype.send_deleteAllTags = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAllTags', Thrift.MessageType.CALL, this.seqid);
  var args = new TagThrift_deleteAllTags_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TagThriftClient.prototype.recv_deleteAllTags = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TagThrift_deleteAllTags_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
TagThriftProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
TagThriftProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

TagThriftProcessor.prototype.process_getTag = function(seqid, input, output) {
  var args = new TagThrift_getTag_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getTag(args.tag_id, function (err, result) {
    var result = new TagThrift_getTag_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getTag", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TagThriftProcessor.prototype.process_addTag = function(seqid, input, output) {
  var args = new TagThrift_addTag_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.addTag(args.name, function (err, result) {
    var result = new TagThrift_addTag_result((err != null ? err : {success: result}));
    output.writeMessageBegin("addTag", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TagThriftProcessor.prototype.process_deleteTag = function(seqid, input, output) {
  var args = new TagThrift_deleteTag_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteTag(args.tag_id, function (err, result) {
    var result = new TagThrift_deleteTag_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteTag", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TagThriftProcessor.prototype.process_getTags = function(seqid, input, output) {
  var args = new TagThrift_getTags_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getTags(args.beginTag, function (err, result) {
    var result = new TagThrift_getTags_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getTags", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TagThriftProcessor.prototype.process_deleteAllTags = function(seqid, input, output) {
  var args = new TagThrift_deleteAllTags_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteAllTags(function (err, result) {
    var result = new TagThrift_deleteAllTags_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteAllTags", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

